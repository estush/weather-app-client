{"ast":null,"code":"import axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5001/api'\n  // timeout: 10000, \n});\nexport const getWeather = async city => {\n  try {\n    const response = await apiClient.get('/weather', {\n      params: {\n        city\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw error;\n  }\n};\n\n// weather.service.js\n\nexport const getCitySuggestions = async query => {\n  try {\n    const response = await fetch(`https://api.example.com/city-suggestions?q=${query}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data.suggestions; // עדכן לפי מבנה הנתונים שלך\n  } catch (error) {\n    console.error('Failed to fetch city suggestions', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","getWeather","city","response","get","params","data","error","console","getCitySuggestions","query","fetch","ok","Error","json","suggestions"],"sources":["D:/PROJECTS/fintek/my-app/src/axios/weather.service.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://localhost:5001/api', \r\n  // timeout: 10000, \r\n});\r\n\r\nexport const getWeather = async (city) => {\r\n  try {\r\n    const response = await apiClient.get('/weather', {\r\n      params: { city },\r\n    });\r\n    return response.data; \r\n  } catch (error) {\r\n    console.error('Error fetching weather data:', error);\r\n    throw error; \r\n  }\r\n};\r\n\r\n// weather.service.js\r\n\r\nexport const getCitySuggestions = async (query) => {\r\n  try {\r\n    const response = await fetch(`https://api.example.com/city-suggestions?q=${query}`);\r\n    if (!response.ok) {\r\n      throw new Error('Network response was not ok');\r\n    }\r\n    const data = await response.json();\r\n    return data.suggestions; // עדכן לפי מבנה הנתונים שלך\r\n  } catch (error) {\r\n    console.error('Failed to fetch city suggestions', error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE;EACT;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,GAAG,CAAC,UAAU,EAAE;MAC/CC,MAAM,EAAE;QAAEH;MAAK;IACjB,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;;AAEA,OAAO,MAAME,kBAAkB,GAAG,MAAOC,KAAK,IAAK;EACjD,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMQ,KAAK,CAAC,8CAA8CD,KAAK,EAAE,CAAC;IACnF,IAAI,CAACP,QAAQ,CAACS,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMP,IAAI,GAAG,MAAMH,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOR,IAAI,CAACS,WAAW,CAAC,CAAC;EAC3B,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}